<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shallowalker</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://brownbichon.github.io/"/>
  <updated>2019-08-27T08:41:15.082Z</updated>
  <id>https://brownbichon.github.io/</id>
  
  <author>
    <name>BrownBichon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于WSL搭建Nextcloud私有云</title>
    <link href="https://brownbichon.github.io/2019/nextcloud-on-wsl/"/>
    <id>https://brownbichon.github.io/2019/nextcloud-on-wsl/</id>
    <published>2019-08-27T07:25:50.260Z</published>
    <updated>2019-08-27T08:41:15.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><h2 id="为什么要搭建私有云"><a href="#为什么要搭建私有云" class="headerlink" title="为什么要搭建私有云"></a>为什么要搭建私有云</h2><p>云存储和文件同步，现在应该成为了许多人工作流程的一部分。<a href="https://www.dropbox.com" target="_blank" rel="noopener">Dropbox</a>、<a href="https://drive.google.com/drive" target="_blank" rel="noopener">Google Drive</a>、<a href="https://onedrive.live.com" target="_blank" rel="noopener">Onedrive</a> 的免费账户都只有最多十几个G的空间，虽然付费可以<del>让你变得更强</del>获得足够的空间，不过前两者需要科学上网，后者的网络也时不时的抽风。</p><a id="more"></a><p>至于国内的<a href="https://www.jianguoyun.com/" target="_blank" rel="noopener">坚果云</a>，高级专业版年付也只有96G空间，对于从事写作一类工作的人来说应该足够了，功能也十分完善。不过由于我工作性质的不同，可能一个项目需要同步的文件就有好几个G，对于空间和网络稳定性的要求也就更高一些。</p><p>大概从14年工作开始，我就开始使用百度云同步盘来同步管理自己的工作和个人文件。国内网盘大战之后，百度一家独大，非会员被限速，无奈之下也一直充值使用着。再后来，百度取消了百度云同步盘的软件支持，虽然软件还能用，不过同步速度却每况愈下，这才让我开始考虑搭建私有云。</p><h2 id="平台选择"><a href="#平台选择" class="headerlink" title="平台选择"></a>平台选择</h2><p>如今市面上可供选择的具有同步功能的私有云软件并不多，出名的也就是 <a href="https://www.seafile.com/" target="_blank" rel="noopener">SeaFile</a>、<a href="https://owncloud.com/" target="_blank" rel="noopener">ownCloud</a>、 <a href="https://nextcloud.com/" target="_blank" rel="noopener">Nextcloud</a> 这三个了，Nextcloud 基本就是 ownCloud 的后继版本。</p><p><img src="/images/nextcloud_on_wsl_01.jpg" alt="Nextcloud_on_wsl_01.jpg"></p><p>看过三款软件的Logo设计和软件界面，作为一名设计师，我毫不犹豫就选择了 Nextcloud。不过 Nextcloud 只支持 Linux 环境直接安装，而我家里的服务器则是闲置的运行 Windows 系统的机器，官方推荐使用虚拟机或者 docker 来搭建。</p><p>在尝试了 docker 搭建之后，尽管可以正常运作，但本地读取和修改同步文件并不是很方便，让我一度放弃了搭建私有云的念头。直到了解到 Windows Subsystem for Linux (WSL) 之后，经过不断了解尝试，终于实现了自己比较满意的效果。</p><h1 id="私有云搭建"><a href="#私有云搭建" class="headerlink" title="私有云搭建"></a>私有云搭建</h1><h2 id="WSL-安装"><a href="#WSL-安装" class="headerlink" title="WSL 安装"></a>WSL 安装</h2><p>默认情况下，Windows 10 并没有启用 WSL，我们需要前往 <code>控制面板</code>-<code>程序和功能</code>-<code>启用或关闭 Windows 功能</code>，在弹出窗口中勾选 <code>适用于 Linux 的 Windows 子系统</code>。确定后需要重启系统生效。</p><p><img src="/images/nextcloud_on_wsl_02.png" alt="nextcloud_on_wsl_02"></p><p>之后，我们就可以直接打开 Microsoft Store，直接搜索 <code>linux</code> 就可以找到支持的 Linux 发行版。我选择了比较熟悉的 Ubuntu，直接点击安装即可。</p><p><img src="/images/nextcloud_on_wsl_03.png" alt="nextcloud_on_wsl_03"></p><h2 id="WSL-环境配置"><a href="#WSL-环境配置" class="headerlink" title="WSL 环境配置"></a>WSL 环境配置</h2><p>安装完成后，可以直接在开始菜单启动 Ubuntu。第一次启动需要几分钟时间进行系统配置，等待配置完成后，设置好用户名密码就可以进行正常操作了。接下来就是对 WSL 进行软件环境配置。</p><p><img src="/images/nextcloud_on_wsl_04.png" alt="nextcloud_on_wsl_04"></p><h3 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h3><p>由于 Ubuntu 默认的软件源服务器位于国外，国内访问速度较慢。我们可以通过修改软件源配置文件，将软件源更改为国内镜像站点，加快访问速度。</p><p>首先使用 <code>lsb_release -a</code> 命令查看系统版本，我的是Ubuntu 16.04，据此来寻找对应的软件源。找到后再进行配置文件修改，我这里使用的是中科大的镜像站点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份软件源配置文件</span></span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原始内容，添加中科大镜像源</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="配置并启用-SSH"><a href="#配置并启用-SSH" class="headerlink" title="配置并启用 SSH"></a>配置并启用 SSH</h3><p>WSL 默认通过 bash 进行操作，对于习惯了通过 SSH 远程操作 Linux 的人来说，可能使用 Putty 之类的软件来进行操作更为适应。默认情况下 WSL 并没有启用 SSH服务，而且并没有正确配置密钥，我们需要手动重装并进行进一步配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 root 用户密码</span></span><br><span class="line">sudo passwd root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重装 SSH</span></span><br><span class="line">sudo apt-get remove openssh-server</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份 SSH 配置文件</span></span><br><span class="line">sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">sudo vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改相应选项</span></span><br><span class="line">Port 20022 <span class="comment"># 22默认端口被 Windows 占用</span></span><br><span class="line">UsePrivilegeSeparation no <span class="comment"># yes-&gt;no</span></span><br><span class="line">PermitRootLogin yes <span class="comment"># 改成 yes</span></span><br><span class="line"><span class="comment">#StrictModes yes # 注释掉</span></span><br><span class="line">PasswordAuthentication yes <span class="comment"># no-&gt;yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 SSH</span></span><br><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><h3 id="配置-LAMP"><a href="#配置-LAMP" class="headerlink" title="配置 LAMP"></a>配置 LAMP</h3><p>Nextcloud 和 Wordpress 之类的应用一样，需要网页服务器、数据库和 PHP，我选择了常见的 LAMP 组合，如果使用 LNMP 组合，则需要对 Nginx 调整相应配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Apache</span></span><br><span class="line">sudo apt-get -y install apache2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 MySQL 服务器，安装过程中需要设置 root 用户密码</span></span><br><span class="line">sudo apt-get -y install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#若未弹出密码设置弹窗，则在安装完成后启动服务，运行下面的命令设置 root 用户密码</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line">sudo mysql -uroot -p</span><br><span class="line">mysql&gt; update mysql.user <span class="built_in">set</span> authentication_string=PASSWORD(<span class="string">'mysql852456'</span>), plugin=<span class="string">'mysql_native_password'</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 MySQL 配置文件</span></span><br><span class="line">sudo vim /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认编码为 UTF-8，添加如下内容</span></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 似乎是 WSL 限制，此时若启动 MySQL 服务，将出现 "No directory……" 错误，需要定位 MySQL 所在目录</span></span><br><span class="line">sudo usermod -d /var/lib/mysql/ mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 PHP</span></span><br><span class="line">sudo apt-get install php7.0 libapache2-mod-php7.0 php7.0-gd php7.0-json php7.0-mysql php7.0-curl php7.0-mbstring php7.0-intl php7.0-mcrypt php-imagick php7.0-xml php7.0-zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Apache 和 MySQL 服务</span></span><br><span class="line">sudo service apache2 start</span><br><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure><p>完成上面的步骤后，可以在浏览器访问 <code>localhost</code> 测试 Apache 是否正常工作。</p><h3 id="部署-Nextcloud"><a href="#部署-Nextcloud" class="headerlink" title="部署 Nextcloud"></a>部署 Nextcloud</h3><p>在配置好 LAMP 基础环境之后，我们就可以开始正式部署 Nextcloud 了。首先可以前往 <a href="https://nextcloud.com/install" target="_blank" rel="noopener">Nextcloud 官网下载地址</a>找到最新版的下载链接，替换掉下面的链接地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移动到目标目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 Nextcloud 服务端</span></span><br><span class="line">sudo wget https://download.nextcloud.com/server/releases/nextcloud-13.0.2.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 unzip</span></span><br><span class="line">sudo apt-get -y install unzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压 Nexcloud 服务端压缩包</span></span><br><span class="line">sudo unzip nextcloud-13.0.2.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改目录权限，否则安装时会出现“内部服务器错误”</span></span><br><span class="line">sudo chown -R www-data:www-data /var/www/html/nextcloud</span><br></pre></td></tr></table></figure><p>将 Nextcloud 放入网页服务器目录后，我们还需要为其配置站点信息，使其可以被正常访问。使用下面的命令新建可用站点配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为 Nextcloud 配置可用站点信息</span></span><br><span class="line">sudo vim /etc/apache2/sites-available/nextcloud.conf</span><br></pre></td></tr></table></figure><p>在文件中，我们需要添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Alias /nextcloud <span class="string">"/var/www/html/nextcloud/"</span></span><br><span class="line"></span><br><span class="line">&lt;Directory /var/www/html/nextcloud/&gt;</span><br><span class="line">  Options +FollowSymlinks</span><br><span class="line">  AllowOverride All</span><br><span class="line"></span><br><span class="line"> &lt;IfModule mod_dav.c&gt;</span><br><span class="line">  Dav off</span><br><span class="line"> &lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"> SetEnv HOME /var/www/html/nextcloud</span><br><span class="line"> SetEnv HTTP_HOME /var/www/html/nextcloud</span><br><span class="line"></span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>保存退出 Vim 后，为站点建立符号链接，启用站点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立符号链接</span></span><br><span class="line">sudo ln -s /etc/apache2/sites-available/nextcloud.conf /etc/apache2/sites-enabled/nextcloud.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Apache 服务</span></span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>此时，在浏览器中打开 <code>localhost/nextcloud</code>，如果出现安全警告，需要配置 <code>.htaccess</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /var/www/html/nextcloud/config/.htaccess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入以下内容</span></span><br><span class="line">deny from all</span><br><span class="line">IndexIgnore *</span><br><span class="line">Satisfy All</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Apache 服务</span></span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>至此，我们应该已经可以在本地通过 <code>localhost/nextcloud</code> 这个地址正常访问和使用 Nextcloud。不过我们还可以进一步配置来实现伪静态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 Apache 模块，为伪静态做准备</span></span><br><span class="line">sudo a2enmod rewrite</span><br><span class="line">sudo a2enmod headers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 config.php，加入伪静态规则</span></span><br><span class="line">sudo vim /var/www/html/nextcloud/config/config.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入以下内容</span></span><br><span class="line"><span class="string">'overwrite.cli.url'</span> =&gt; <span class="string">'https://example.org/nextcloud'</span>,</span><br><span class="line"><span class="string">'htaccess.RewriteBase'</span> =&gt; <span class="string">'/nextcloud'</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Apache 服务</span></span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><h2 id="实现远程访问"><a href="#实现远程访问" class="headerlink" title="实现远程访问"></a>实现远程访问</h2><p>通过前面的一系列操作配置，Nextcloud 已经可以在本地运行起来了，不过由于是家庭宽带，没有固定公网 IP，还无法正常通过网络进行远程访问，也就无法实现文件同步功能。</p><h3 id="公网-IP-及监听端口"><a href="#公网-IP-及监听端口" class="headerlink" title="公网 IP 及监听端口"></a>公网 IP 及监听端口</h3><p>我们可以通过使用 DDNS 动态域名服务来解决没有固定公网 IP 的问题，网上的 DDNS 服务很多，最出名的可能就是<a href="https://hsk.oray.com/" target="_blank" rel="noopener">花生壳</a>了。我使用的是 <a href="https://www.noip.com/" target="_blank" rel="noopener">no-ip</a> 提供的免费 DDNS，虽然每个月都要手动续签一下，不过还是挺好用的。</p><p>另外，家庭宽带一般都被封了80端口，我们就需要修改 Apache 的默认监听端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 Apache 端口配置文件</span></span><br><span class="line">sudo vim /etc/apache2/ports.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认的80端口</span></span><br><span class="line">Listen 32080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Apache 服务</span></span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>除了修改端口之外，我们还需要在路由器设置端口映射，并在系统防火墙中为端口设置入站规则，这样才能正常实现远程访问。</p><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p>端口映射的设置根据路由器品牌型号的不同，设置过程稍有区别。首先在 Windows 中打开 CMD，使用 <code>ipconfig -all</code> 命令查看本机的 mac 地址和内部 IP 地址。</p><p><img src="/images/nextcloud_on_wsl_05.png" alt="nextcloud_on_wsl_05"></p><p>由于大多数路由器会动态地给连接的设备分配内部 IP 地址，为了防止服务器的内部 IP 时常变动，我们需要在路由器中为设备设置预留 IP 地址。只需要将前面查找到的 mac 地址和 内部 IP 对应添加到预留地址列表中即可。</p><p><img src="/images/nextcloud_on_wsl_06.png" alt="nextcloud_on_wsl_06"></p><p>接下来，在端口映射配置界面分别为 WSL 的 SSH 和 Apache 服务添加端口映射条目，我这里使用的是之前设定的 <code>20022</code> 和 <code>32080</code> 端口。</p><p><img src="/images/nextcloud_on_wsl_07.png" alt="nextcloud_on_wsl_07"></p><h3 id="入站规则"><a href="#入站规则" class="headerlink" title="入站规则"></a>入站规则</h3><p>最后，我们需要在 <code>控制面板</code>-<code>系统和安全</code>-<code>Windows Defender 防火墙</code>-<code>高级设置</code> 中为 SSH 和 Apache 服务添加入站规则。</p><ol><li><p>在窗口左侧点击 <code>入站规则</code>，右键并选择 <code>新建规则</code>。</p></li><li><p>在弹出窗口的 <code>规则类型</code> 列表中，选择 <code>端口</code>。</p></li><li><p>在 <code>协议和端口</code> 页面，选择 <code>TCP</code> 和 <code>特定本地端口</code>，在后方的输入框中按格式输入前面用到的本地端口 <code>20022, 32080</code>。</p></li><li><p>在 <code>操作</code> 页面，勾选 <code>允许连接</code>。</p></li><li><p>在 <code>配置文件</code> 页面，全部勾选。</p></li><li><p>最后根据喜好设置规则名称。</p></li></ol><p>以上全部设置完成后，我们就可以通过 DDNS 提供的地址搭配端口来实现远程访问和文件同步了。浏览器打开地址类似 <code>http://address.ddns.net:32080/nextcloud</code>。</p><h2 id="实现-WSL-开机启动"><a href="#实现-WSL-开机启动" class="headerlink" title="实现 WSL 开机启动"></a>实现 WSL 开机启动</h2><p>由于 WSL 只是一个子系统，当我们关闭 bash 窗口，整个 Linux 系统包括其中正在运行的各个服务都会被完全关闭，Nextcloud 也就没办法访问了。重新打开 bash 窗口后，Apache 等服务也需要再次手动开启。</p><p>理想情况是当 Windows 启动时，在后台自动启动 bash，并且开启需要的各种服务。我们可以通过建立开机启动脚本来实现。</p><h3 id="Linux-启动脚本"><a href="#Linux-启动脚本" class="headerlink" title="Linux 启动脚本"></a>Linux 启动脚本</h3><p>建立 Linux 脚本，当脚本运行时，启动 SSH、Apache、MySQL 等服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建 Linux 启动脚本，文件位置可以根据自己需要调整</span></span><br><span class="line">sudo vim /usr/boot.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入以下内容，其中 passwd 即一开始设置的 Linux 用户对应的密码</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'ubuntu852456'</span> | sudo -S service ssh start</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'ubuntu852456'</span> | sudo -S service apache2 start</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'ubuntu852456'</span> | sudo -S service mysql start</span><br><span class="line"><span class="variable">$SHELL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line">sudo chmod 777 /usr/boot.sh</span><br></pre></td></tr></table></figure><h3 id="Windows-启动脚本"><a href="#Windows-启动脚本" class="headerlink" title="Windows 启动脚本"></a>Windows 启动脚本</h3><p>建立 Windows 脚本，在后台挂起 bash，并运行前面建立的 Linux 脚本。可以通过建立计划任务来实现开机运行脚本，不过我这里选择了更简单的把脚本快捷方式放入系统启动文件夹的方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建 wsl.vbs，文件位置可以根据自己需要调整，加入以下内容</span></span><br><span class="line">Set ws = CreateObject(<span class="string">"Wscript.Shell"</span>) </span><br><span class="line">ws.run <span class="string">"bash /usr/boot.sh"</span>,vbhide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将脚本快捷方式放入 Windows 启动文件夹</span></span><br><span class="line">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</span><br></pre></td></tr></table></figure><h1 id="Nextcloud-设置"><a href="#Nextcloud-设置" class="headerlink" title="Nextcloud 设置"></a>Nextcloud 设置</h1><p>经过上面的努力，我们已经拥有了一个完全属于自己的私有云。接下来就是 Nextcloud 的应用设置了。</p><h2 id="账户和数据库设置"><a href="#账户和数据库设置" class="headerlink" title="账户和数据库设置"></a>账户和数据库设置</h2><p>第一次打开 Nextcloud, 我们会进入一个引导界面，在这里创建我们的管理员账号，并配置好数据库， <code>数据目录</code> 保持默认即可，后续可以更改。<code>配置数据库</code> 选项中，用户部分填入 <code>root</code>，密码即在安装 MySQL 时设置的管理员密码。最后点击 <code>安装完成</code>，稍等一段时间，Nextcloud 就会完成应用的初始化配置。</p><p><img src="/images/nextcloud_on_wsl_08.png" alt="nextcloud_on_wsl_08"></p><h2 id="文件目录设置"><a href="#文件目录设置" class="headerlink" title="文件目录设置"></a>文件目录设置</h2><p>Nextcloud 默认文件存储目录在网站根目录的 <code>data</code> 文件夹，因为整个 WSL 都是在C盘，也就是说我们以后同步的文件也都存储在C盘，这并不是我们所希望的。尽管 WSL 可以通过 <code>/mnt/d</code> 这样的目录访问D盘等其他盘符，但由于权限问题，并不能把默认存储位置设置在其他硬盘或分区。这里我们可以通过 Nextcloud 的 <code>外部存储</code> 应用来曲线救国。</p><p>点击网页右上角的用户头像，在下拉菜单中可以找到 <code>应用</code> 选项。点击进入后，我们可以看到各种用于增强 Nextcloud 功能的应用，就像 Chrome 的各种扩展一样。在 <code>你的应用</code> 页面找到 <code>External storage support</code> 并启用，就开启了外部存储支持。</p><p>再转到设置页面，可以在左侧找到 <code>外部存储</code> 设置选项，可以把本地的其他硬盘或者文件夹映射为 Nextcloud 中的一个目录，相当于将你映射的文件夹中的文件都挂载到了云端。在后面进行同步之类的操作时，只要在目录内操作，文件也就直接被保存到相应的硬盘上，不至于C盘被撑爆。</p><p>除了本地地址外，它还支持 FTP，SFTP，WebDAV，Amazon S3 等等网络存储地址，甚至还可以把其他 Nextcloud 服务器地址链接进来，方便进行聚合管理。</p><p><img src="/images/nextcloud_on_wsl_09.png" alt="nextcloud_on_wsl_09"></p><p>Nextcloud 默认限制了文件最大上传大小为 500M。如果需要更改，可以在设置页面找到 <code>其他设置</code> - <code>文件处理</code>，更改成需要的大小保存即可。</p><p>一切准备就绪，接下来只要下载相应平台的<a href="https://nextcloud.com/install/" target="_blank" rel="noopener">同步客户端</a>就可以开始体验私有云啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;h2 id=&quot;为什么要搭建私有云&quot;&gt;&lt;a href=&quot;#为什么要搭建私有云&quot; class=&quot;headerlink&quot; title=&quot;为什么要搭建私有云&quot;&gt;&lt;/a&gt;为什么要搭建私有云&lt;/h2&gt;&lt;p&gt;云存储和文件同步，现在应该成为了许多人工作流程的一部分。&lt;a href=&quot;https://www.dropbox.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dropbox&lt;/a&gt;、&lt;a href=&quot;https://drive.google.com/drive&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Drive&lt;/a&gt;、&lt;a href=&quot;https://onedrive.live.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Onedrive&lt;/a&gt; 的免费账户都只有最多十几个G的空间，虽然付费可以&lt;del&gt;让你变得更强&lt;/del&gt;获得足够的空间，不过前两者需要科学上网，后者的网络也时不时的抽风。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://brownbichon.github.io/2019/hello-world/"/>
    <id>https://brownbichon.github.io/2019/hello-world/</id>
    <published>2019-08-27T07:21:34.844Z</published>
    <updated>2019-08-26T15:57:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
